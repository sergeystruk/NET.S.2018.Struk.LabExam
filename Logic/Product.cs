using System;
using System.Collections.Generic;

namespace Logic
{
    public class Product : IEquatable<Product>
    {
        #region Fields and properties

        private decimal coast;

        public string Name {get; private set;}
        public decimal Coast
        {
            get
            {
                return coast;
            }
            private set
            {
                if(value <= 0)
                {
                    throw new ArgumentOutOfRangeException(nameof(value));
                }

                coast = value;
            }
        }
        
        //Properties for tests and demonstration of work
        //which shows that every product is unique
        public int Id { get; private set; }

        #endregion

        #region Constructors

        public Product(string name, decimal coast)
        {
            Name = name ?? throw new ArgumentNullException(nameof(name));
            Coast = coast;
            Id = SimpleIDGenerator.Generate();
        }

        #endregion

        #region Implemented and overrided methods

        /// <summary>
        /// Implementation of IEquatable interface
        /// </summary>
        /// <param name="other">
        /// another product
        /// </param>
        /// <returns>
        /// true if equal, false if not
        /// </returns>
        public bool Equals(Product other)
        {
            return Name.ToUpper() == other.Name.ToUpper();
        }
        
        /// <summary>
        /// Overrided objects method
        /// </summary>
        /// <param name="obj">
        /// other product
        /// </param>
        /// <returns>
        /// true if equal, false if not
        /// </returns>
        public override bool Equals(object obj)
        {
            var product = obj as Product;

            if(ReferenceEquals(product, null))
            {
                return false;
            }

            return Equals(product);
        }

        /// <summary>
        /// Generated by visual studio
        /// </summary>
        /// <returns>
        /// Elements Hash Code
        /// </returns>
        public override int GetHashCode()
        {
            var hashCode = 632013715;
            hashCode = hashCode * -1521134295 + EqualityComparer<string>.Default.GetHashCode(Name);
            hashCode = hashCode * -1521134295 + Coast.GetHashCode();
            hashCode = hashCode * -1521134295 + Id.GetHashCode();
            return hashCode;
        }

        /// <summary>
        /// Overrided objects method
        /// </summary>
        /// <returns>
        /// String implementation of Product
        /// </returns>
        public override string ToString()
        {
            return $"{Name}\t{Coast}\t{Id}\n";
        }

        #endregion
    }
}
